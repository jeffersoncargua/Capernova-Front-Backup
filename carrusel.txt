import React from 'react'
import { Carousel } from 'flowbite';

import Capernova from '../assets/Capernova.png';

export const Hero = () => {

    const carouselElement = document.getElementById('carousel-example');
    const items = [
        {
            position:0,
            el:document.getElementById('carousel-item-1')
        },
        {
            position:1,
            el:document.getElementById('carousel-item-2')
        },
        {
            position:2,
            el:document.getElementById('carousel-item-3')
        },
        {
            position:3,
            el:document.getElementById('carousel-item-4')
        },
        {
            position:4,
            el:document.getElementById('carousel-item-5')
        }
    ];

    const options = {
        defaultPosition:1,
        interval:3000
    }

    const instanceOptions = {
        id: 'animation-carousel',
        override: true
    };

    const carousel = new Carousel(carouselElement,items,options,instanceOptions);

    carousel.cycle();

  return (    
    <div className='relative flex'>
        <div id="animation-carousel" className=" w-full" data-carousel="slice">
            {/*<!-- Carousel wrapper -->*/}
            <div className="relative h-56 overflow-hidden rounded-lg md:h-96">
                {/*<!-- Item 1 -->*/}
                <div id='carousel-item-1' className="hidden duration-200 ease-linear absolute inset-0 transition-transform transform" data-carousel-item="">
                    <img src={Capernova} className="absolute block w-1/2 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" alt="..." />
                </div>
                {/*<!-- Item 2 -->*/}
                <div id='carousel-item-2' className="duration-200 ease-linear absolute inset-0 transition-transform transform -translate-x-full z-10 hidden" data-carousel-item="">
                    <img src={Capernova} className="absolute block w-1/2 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" alt="..." /> 
                </div>
                {/*<!-- Item 3 -->*/}
                <div id='carousel-item-3' className="duration-200 ease-linear absolute inset-0 transition-transform transform z-30 -translate-x-full z-10" data-carousel-item="">
                    <img src={Capernova} className="absolute block w-1/2 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" alt="..." />
                </div>
                {/*<!-- Item 4 -->*/}
                <div id='carousel-item-4' className="duration-200 ease-linear absolute inset-0 transition-transform transform z-20 translate-x-0 z-30" data-carousel-item="">
                    <img src={Capernova} className="absolute block w-1/2 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" alt="..." />
                </div>
                {/*<!-- Item 5 -->*/}
                <div id='carousel-item-5' className="duration-200 ease-linear absolute inset-0 transition-transform transform translate-x-full z-20" data-carousel-item="active">
                    <img src='/public/assets/fondo1.jpg' className="absolute block w-1/2 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" alt="..." />
                </div>
            </div>
            {/*<!-- Slider controls -->*/}
            <button onClick={() => carousel.prev()} type="button" className="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev="">
                <span className="inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-50 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <svg className="w-4 h-4 text-slate-700 dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 1 1 5l4 4"></path>
                    </svg>
                    <span className="sr-only"><font style={{verticalAlign: 'inherit'}}><font style={{verticalAlign: 'inherit'}}>Anterior</font></font></span>
                </span>
            </button>
            <button onClick={() => carousel.next()} type="button" className="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next="">
                <span className="inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-50 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <svg className="w-4 h-4 text-slate-700 dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 9 4-4-4-4"></path>
                    </svg>
                    <span className="sr-only"><font style={{verticalAlign: 'inherit'}}><font style={{verticalAlign: 'inherit'}}>Pr√≥ximo</font></font></span>
                </span>
            </button>
        </div>
    </div>

  )
}


//Slider para los cursos y productos de capernova -- Regresar a este codigo en caso de error
import { useEffect, useState } from "react";
import { ProductCard } from "../../../components/ProductCard";
import { useNavigate } from "react-router-dom";

import { Swiper, SwiperSlide } from 'swiper/react';
// import required modules
import { Pagination } from 'swiper/modules';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/pagination';

// Import AOS para el fade
import AOS from 'aos';
import 'aos/dist/aos.css'; // You can also use <link> for styles
// ..

export const SliderProduct = () => {

  const [current, setCurrent] = useState(0);
  const [slices, setSlices] = useState([]);
  const navigate = useNavigate();
  
  useEffect(()=>{
    AOS.init({
      offset: 120, // offset (in px) from the original trigger point
      delay: 0, // values from 0 to 3000, with step 50ms
      duration: 2000, // values from 0 to 3000, with step 50ms
      easing: 'ease', // default easing for AOS animations
      once: false, // whether animation should happen only once - while scrolling down
      mirror: false, // whether elements should animate out while scrolling past them
      anchorPlacement: 'top-bottom', // defines which position of the element regarding to window should trigger the animation
    });
  },[])

  useEffect(() => {
    const fetchProducto = async() => {
      try {
      
        const resultFromApi = await fetch(`${process.env.REACT_APP_API_URL}/Producto/getAllProducto?tipo=${"producto"}`,{
          method:'GET',
          credentials : 'include',
          headers:{
            'Content-Type' : 'application/json',
            'Accept' : 'application/json'
          }
        });
  
        const resultFetch = await resultFromApi.json();
        
        //console.log(resultFromApi.status);
        if (resultFromApi.status !==200 && resultFromApi.status !==400) {
          throw resultFetch;
        }

        if (resultFetch.isSuccess) {
          setSlices(resultFetch.result);
        }else{
          setSlices([]);
        }

      } catch (error) {
        console.error(error);
        navigate('error');
      }
   }
    
   fetchProducto();

  },[navigate])


  let previousSlice = () => {
    if(current === 0){
        setCurrent(slices.length - 1);
    }else{
        setCurrent(current - 1);
    }
    //console.log(current);
}

let nextSlice = () => {
    if(current === slices.length-1){
        setCurrent(0);
    }else{
        setCurrent(current + 1);
    }
    //console.log(current); imprime el slider Actual
}

  return (
    <div className="w-[95%] mx-auto flex flex-col dark:bg-gray-900 mt-10" data-aos="fade-up">
      {/* <h1 className="self-center text-5xl font-extrabold before:block before:absolute before:-inset-1 before:-skew-y-[1.7deg] before:bg-black dark:before:bg-slate-50 relative my-1" ><span className="before:block before:absolute before:-inset-1 before:skew-y-[1.8deg] before:bg-amber-300 "><span className=" text-white relative ">Nuestros </span></span></h1> 
      <h1 className="self-center text-5xl font-extrabold before:block before:absolute before:-inset-1 before:-skew-y-[1.7deg] before:bg-black dark:before:bg-slate-50 relative my-1" ><span className="before:block before:absolute before:-inset-1 before:skew-y-[1.8deg] before:bg-amber-300 "><span className=" text-white relative ">Cursos </span></span></h1> */}
      
      {/* <h1 className="self-end text-4xl font-bold before:block before:absolute before:-inset-1 before:-skew-y-[1.7deg] before:bg-black dark:before:bg-slate-50 relative my-8 " ><span className="before:block before:absolute before:-inset-1 before:skew-y-[1.7deg] before:bg-amber-300 "><span className=" text-white relative ">Nuestros Productos ...</span></span></h1>  */}
      <h1 className="self-center md:self-end text-2xl md:text-3xl font-medium text-center mb-10 md:mr-14 md:my-10 dark:text-white">
        <span>
            Productos
            <hr className="mx-auto w-[100px] border border-blue-400 drop-shadow-md" />
        </span>
      </h1>
      {/*<h1 className="self-end text-4xl font-bold before:block before:absolute before:-inset-1 before:-skew-y-[1.7deg] before:bg-cyan-400 relative my-8 " ><span className=" text-white relative ">Te Ofrecemos ...</span></h1>*/}
      {/*Slider que permite movilizar los cursos que contiene la pagina web */}
      <div className="w-full flex ">
        <div className="w-[5%] flex items-center max-sm:hidden">
          <span onClick={()=> previousSlice()} className=" cursor-pointer">
            <i className="bi bi-arrow-left-circle-fill text-gray-300 hover:text-blue-600 text-3xl"></i>
          </span>
        </div>
        <div className="w-[90%] overflow-x-hidden mx-auto">

          {/* permite transformar el desplazamiento en x en pantalla completa  style={{transform: `translateX(-${current/3 * 100}%)`}} */}
          <div className={`flex transition ease-in-out duration-40 mx-auto max-lg:hidden `} style={{transform: `translateX(-${current *25}%)`}} >
              {slices.map((itemProd,index) => (
                  <div className= 'shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 hover:scale-110 mb-10' key={index}>
                    {/*ProductCard */}
                      <ProductCard itemProd={itemProd} />
                  </div> 
              ))}
          </div>

          {/* permite transformar el desplazamiento en x en pantalla semicompleta  style={{transform: `translateX(-${current/3 * 100}%)`}} */}
          <div className={`md:max-lg:flex transition ease-in-out duration-40 mx-auto hidden `} style={{transform: `translateX(-${current/3 * 100}%)`}} >
              {slices.map((itemProd,index) => (
                  <div className= 'shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 hover:scale-110 mb-10' key={index}>
                    {/*ProductCard */}
                      <ProductCard itemProd={itemProd} />
                  </div> 
              ))}
          </div>

          {/* permite transformar el desplazamiento en x en pantalla mediana  style={{transform: `translateX(-${current/3 * 100}%)`}} */}
          <div className={`sm:max-md:flex transition ease-in-out duration-40 mx-auto hidden `} style={{transform: `translateX(-${current * 50}%)`}} >
              {slices.map((itemProd,index) => (
                  <div className= 'shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 hover:scale-110 mb-10' key={index}>
                    {/*ProductCard */}
                      <ProductCard itemProd={itemProd} />
                  </div> 
              ))}
          </div>

          {/* permite transformar el desplazamiento en x en pantalla peque√±a  style={{transform: `translateX(-${current/3 * 100}%)`}} */}
          {/* <div className={`max-sm:flex transition ease-in-out duration-40 mx-auto hidden `} style={{transform: `translateX(-${current * 100}%)`}} >
              {slices.map((itemProd,index) => (
                  <div className= 'shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 hover:scale-110 mb-10' key={index}>
                    //ProductCard 
                      <ProductCard itemProd={itemProd} />
                  </div> 
              ))}
          </div> */}

          <div  className="max-sm:flex hidden mx-auto">
            <Swiper 
              pagination={true} 
              modules={[Pagination]} 
            >
                {slices.map((itemProd,index) => (
                  <SwiperSlide key={index}>
                    <div className= 'shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 hover:scale-100 mb-10' key={index}>
                      {/*ProductCard */}
                        <ProductCard itemProd={itemProd} />
                    </div>
                  </SwiperSlide>
                        
                    ))}
            </Swiper>
          </div>

          

        </div>
        <div className="w-[5%] flex items-center justify-end max-sm:hidden">
          <span onClick={()=> nextSlice()} className="cursor-pointer">
            <i className="bi bi-arrow-right-circle-fill text-gray-300 hover:text-blue-600 text-3xl"></i>
          </span>
        </div>
      </div>

      {/*Indicadores de la tarjeta actual */}
      <div className="flex justify-center w-full  items-center max-sm:hidden">
            {slices.map((s,index) => (
              <span key={index} className={`flex me-3 ${current===index ? 'bg-blue-600 w-3.5 h-3.5':'bg-gray-600 w-3 h-3'}  rounded-full`}></span>
            ))} 
      </div>

      

      
    </div>
  )
}
